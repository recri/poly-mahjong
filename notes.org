* Mahjong progressive web app
** Mahjong svg canvas class
   has:
*** viewBox - determined by tile size and layout size
*** defs section containing the tile image definitions
** Mahjong tile image class
   has:
*** tile-decoration - the svg which draws the tile decoration
    just the name of the tile decoration def
*** a position - x and y in units of tile-width and tile-height
*** is-drawn - 
*** is-selected - if drawn, is drawn with selected tile or plain tile
*** can-be-selected, is unblocked, ie playable
     actually a property of the layout with the specified tiles removed,
     that is a game state
*** on-click - handler that determines whether to change is-selected
    is:
*** drawn in svg
*** separate base tile and tile decoration rendering
*** separate plain tile and selected tile rendering
*** If defined and drawn in one svg element,
    then shared definitions are unproblematic.
**** Pulling shared definitions from source file
     which in turn use shared definitions
     is awkward for unknown reasons.
     There are multiple layers and versions of shadow
     dom active because of polymer, because of <use ...>
     elements in svg, because of <use ...> elements which
     reference other source files of svg.
** Mahjong tile class
*** draws selected and unselected versions of tiles,
*** detects matching tiles
**** which have identical images
     Most tiles occur with multiplicity 4 in the collection,
     but seasons and flowers only have multiplicity 1.
     seasons match seasons and flowers match flowers.
     Ah, eliminate the four different season/flower tiles, use
     the same tile image for all four, they match just like the
     others.
** Mahjong layout class
*** Defines slots which tiles may occupy
*** Defines which slots are selectable
**  
* Made into a firebase deployable
** deploys to android, chromebook, and linux running chrome
** installs to home page under android
* To do list
[x] make svg canvas a useful size
	the css/props to size it were stolen from elsewhere
[x] solve the source of laggy touches
	seems to be the tests for playability, which get laggy
	when they have to go into deep thought, delays response
	to subsequent touches,
	may just be the touch gesture handling
	not seeing it on android phone
[x] enable menu items
[x] enable menu items on/off according to state of game
[x] make an end of game dialog
	that presents undo/restart/new as options	
[x] make the name correct
	in the desktop manifest etc
[x] make the icons correct
	in the desktop manifest etc
	that is, create an icon for Mahjong
[x] saved to desktop game app cannot start new game without menu
	should be better now
[x] eliminate the play/tiles/layout/scores/prefs menu, just the play
[x] bug in the history made for redo'ing to see generated solution
	throws an undefined object exception
[x] bug in the history appears to be skipping tiles	
[x] get rid of the ALL CAPS menu names
[x] get rid of the transient bold menu names
[x] dismiss menu after item selected
[x] use polymer template on-click matching
[x] eliminate mahjong-app.html
[x] simplify mahjong-icons.html
[x] eliminate mahjong-view404.html
[x] mark end of game dialogs as modal to avoid dismiss by errant touch
[x] add styling to paper-dialog to avoid marginless display
	just enclosed the text in <p></p> and received margins
[ ] rewrite mahjong-play.js to avoid es6 errors
	or keep it as is until es6 handled in polymer-2.0
	and rewrite into es6 entirely
[x] eliminate offset of icon
[x] add keyboard accelerators to menu
[ ] figure out how to hint at keyboard accelerators in menu
[x] make sure that accelerators are disabled when menu is disabled
	turned out to be much more complicated, done in brute force but
	not correctly, the menu accelerators should be focused when the
	mahjong game is focused and simply disabled when the modal dialogs
	open, the modal dialogs should implement the same accelerators to
	the extent they are meaningful
[ ] add "About" item to menu with brief dialog
[ ] add "Pause" and "Continue" and game timing
[ ] add "Hint" to menu
[ ] add "Preferences" to menu
[ ] add "Scores" to menu (who saves scores, where?)
[x] figure out why the end of game buttons are flaky
	tried posting actions with this.async() still flaky
	flaky meaning run/don't run for unknown reasons
	moved button and menu events to polymer's tap event
	no such event for the svg dom
[x] fixed the broken history
	the loop that truncated old history was busted,
	stopped altering the size of the history.items,
	just kept the correct pointers
[x] make the url show the seed of the random number generator
	this fails when you try to reload a sub-url, the server
	cannot resolve the url and it doesn't know that the program
	will resolve it internally, surprised that there isn't a fix
	for this already in polymer/firebase.
	had to use the window.location.hash, not using app-location or
	app-route at all
[x] make the svg icons render each in its own <svg> element which can
	be the target of on-tap.  Problem is whether this needs to
	include the entire set of defs in each tile.  There are ways
	to reference an external svg, but I think it requires the <use>
	elements inside the svg to ref itself as an external svg.
[x] reduce the umbra of the tile buttons?  maybe not, let it be for now
	reduced by setting noink on the paper-button and using a dev
	release of chrome on android
[x] move the app background-color to the <body> because we lost all the
	height:100% settings for some reason when I built and pushed to
	firebase
[x] look for clues about making the button animation work correctly on the
	dialogs
	need to fire action after "transitionend" event from the button
[x] add icon buttons for undo/redo/new/restart to the main screen in place
	of menu hamburger
[ ] on android, not centered, not redrawn correctly on rotate
	the actual problem has to do with rotate, occurs on Flip, too, so
	the resize event is only part of the story when rotating
[x] on android, tiles have unusual tap response, especially with tappable
	neighbors, fixed with canary Chrome and noink on the paper-button,
	will probably help responsiveness on the slower machines, too.
[x] limit on-tap handlers to tiles which are in play, so there aren't so
	many impotent button press animations, eliminated all on-tap animation
	on tiles by seting noink="true", but I still get some ink on Android,
	but not when I go for a more canary version of Chrome
[ ] rotate button menu to align with free space on screen
[x] changed dialog button event to on-tap from on-transition, but the dialogs still
  get stuck on screen sometimes
[ ] Fails lighthouse performance because there is so much to load for first
  paint.  Should figure out what the bottle neck actually is before attempting
  fixes.
[ ] Really should figure out how to separate the tiles and the layout so they
  can be customized.
[ ] Separate tile runs into the svg rendering not using static binding to names
